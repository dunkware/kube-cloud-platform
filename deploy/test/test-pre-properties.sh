
#!/bin/bash

# Load and export environment variables
export APP_VERSION="1.0.0"
export DOCKER_REGISTRY="docker.io/dunkware"
export ENVIRONMENT="staging"
export REPLICAS="3"
export DB_HOST="postgres-db"
export DB_PORT="5432"
export REDIS_HOST="redis-cache"

# Function to replace environment variables in values.yaml
replace_env_vars() {
    local template_file="$1"
    local output_file="$2"

    # Create a copy of the template
    cp "$template_file" "$output_file"

    # Replace all ${VARIABLE} occurrences with their values
    envsubst < "$template_file" > "$output_file"
}

# values-template.yaml
cat << 'EOF' > values-template.yaml
image:
  repository: ${DOCKER_REGISTRY}/myapp
  tag: ${APP_VERSION}

environment: ${ENVIRONMENT}

replicaCount: ${REPLICAS}

config:
  database:
    host: ${DB_HOST}
    port: ${DB_PORT}
  cache:
    host: ${REDIS_HOST}
EOF

# deploy.sh
#!/bin/bash

# Source environment variables
source ./set-env.sh

# Generate the final values.yaml
replace_env_vars "values-template.yaml" "values.yaml"

# Now you can use these variables in your helm command
helm upgrade --install myapp ./chart \
    --values values.yaml \
    --namespace "${ENVIRONMENT}" \
    --create-namespace

# Example of final generated values.yaml after processing:
# This will be generated by the script above
cat << 'EOF' > example-generated-values.yaml
image:
  repository: docker.io/dunkware/myapp
  tag: 1.0.0

environment: staging

replicaCount: 3

config:
  database:
    host: postgres-db
    port: 5432
  cache:
    host: redis-cache
EOF

# Alternative approach using environment-specific files
# environments/staging.env
cat << 'EOF' > environments/staging.env
export APP_VERSION="1.0.0"
export DOCKER_REGISTRY="docker.io/dunkware"
export ENVIRONMENT="staging"
export REPLICAS="3"
export DB_HOST="staging-db"
export DB_PORT="5432"
EOF

# environments/production.env
cat << 'EOF' > environments/production.env
export APP_VERSION="1.0.0"
export DOCKER_REGISTRY="docker.io/dunkware"
export ENVIRONMENT="production"
export REPLICAS="5"
export DB_HOST="prod-db"
export DB_PORT="5432"
EOF

# deploy-with-env.sh
#!/bin/bash

# Check if environment parameter is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <environment>"
    echo "Available environments: staging, production"
    exit 1
fi

ENV_FILE="environments/$1.env"

if [ ! -f "$ENV_FILE" ]; then
    echo "Environment file not found: $ENV_FILE"
    exit 1
fi

# Source environment-specific variables
source "$ENV_FILE"

# Generate values.yaml from template
replace_env_vars "values-template.yaml" "values.yaml"

# Deploy with Helm
helm upgrade --install myapp ./chart \
    --values values.yaml \
    --namespace "${ENVIRONMENT}" \
    --create-namespace